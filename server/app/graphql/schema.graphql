
interface Node {
    _id: ID!
}

interface Payload {
    status: Boolean!
    error: Error
}

type User implements Node {
    _id: ID!
    nickname: String!
    email: String!
    registered_for_lunch: [Timestamp]
}

type Timestamp implements Node {
    _id: ID!
    registered: DateTime!
    userId: ID!
}

type Query {
    node(_id: ID!): Node
    getUsers: UserPayload
    getTimestamps: TimestampPayload
}

type Mutation {
    createUser(nickname: String!, email: String!): UserPayload!
    registerLunch(userId: ID!): TimestampPayload!
}

type UserPayload implements Payload {
    status: Boolean!
    error: Error
    user: [User]
}

type TimestampPayload implements Payload {
    status: Boolean!
    error: Error
    timestamp: [Timestamp]
}

type Error {
    message: String
}

scalar DateTime